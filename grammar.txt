<program>           ::= BEGIN <stmt_list> 

<stmt_list>         ::= <stmt> <stmt_list> | END

<stmt>              ::= <declaration> | <assignment> | <cond> | <repeatif>

<declaration>       ::= <type> identifier `;`
<type>              ::= oneb | twob | fob | ateb

<assignment>        ::= identifier `=` <expr> `;`

<cond>              ::= iffy <bool_expr> `{` <codeblock> ew `{` <codeblock>
                    | iffy <bool_expr> `{` <codeblock>
<repeatif>          ::= repeatif <bool_expr> ‘{‘ <codeblock>
<codeblock>         ::= <stmt> <codeblock> | `}` 

<bool_expr>         ::= `(` <expr> <comparison_op> <expr> `)`
<comparison_op>     ::= `<` | `<=’ | `>’ | `>=’ | `==’ | `|=` 

### Enforce rule of non BODMAS
<expr>              ::= <sum>
<sum>               ::= <mod> `+` <sum> | <mod>
<mod>               ::= <div> `%` <mod> |     <div>
<div>               ::= <mul> `/` <div> | <mul>
<mul>               ::= <sub> `*` <mul> | <sub>
<sub>               ::= <factor> `-` <sub> | <factor>
<factor>            ::= `(` <expr> `)` | <value>

<value>             ::= LITERAL_INT_oneb 
                    | LITERAL_INT_twob 
                    | LITERAL_INT_fob 
                    | LITERAL_INT_ateb
                    | identifier
